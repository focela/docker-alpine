#!/command/with-contenv bash
#-----------------------------------------------------------------------------
# Container Monitoring Service Runtime Script
#
# Purpose: Manages the runtime execution of monitoring backends (Zabbix agents)
#          with support for classic and modern agent types, autoregistration,
#          and firewall integration
# Context: Runs as s6-overlay service after container initialization completes
# Note: This script handles Zabbix agent startup with dynamic configuration
#-----------------------------------------------------------------------------



#-----------------------------------------------------------------------------
# SERVICE INITIALIZATION
#-----------------------------------------------------------------------------
# Source container core functions and prepare monitoring service
source /assets/functions/00-container
PROCESS_NAME="monitoring"
output_off
prepare_service defaults single
check_container_initialized
check_service_initialized init
liftoff

#-----------------------------------------------------------------------------
# MONITORING BACKEND EXECUTION
#-----------------------------------------------------------------------------
# Execute monitoring backend based on configuration
case "${CONTAINER_MONITORING_BACKEND}" in
  "zabbix" )
    print_debug "Trying to execute Container Monitoring Backend Zabbix"
    
    #-----------------------------------------------------------------------------
    # ZABBIX AGENT TYPE SELECTION
    #-----------------------------------------------------------------------------
    # Select Zabbix agent type and command
    case "${ZABBIX_AGENT_TYPE,,}" in
      "1" | "c" | "classic" | "legacy" | "old" )
        print_debug "Starting classic Zabbix Agent"
        zabbix_command="zabbix_agentd"
        zabbix_agent_type="classic"
      ;;
      "2" | "m" | "n" | "modern" | "new" )
        print_debug "Starting modern Zabbix agent"
        zabbix_command="zabbix_agent2"
        zabbix_agent_type="modern"
      ;;
      * )
        print_debug "No known Zabbix agent type selected, defaulting to classic agent"
        zabbix_command="zabbix_agentd"
        zabbix_agent_type="classic"
      ;;
    esac

    #-----------------------------------------------------------------------------
    # ZABBIX AUTOREGISTRATION CONFIGURATION
    #-----------------------------------------------------------------------------
    # Extract autoregister configuration
    if [ -d "${ZABBIX_CONFIG_PATH}/${ZABBIX_CONFIG_FILE}.d" ] && [ "$(find "${ZABBIX_CONFIG_PATH}/${ZABBIX_CONFIG_FILE}.d" -name "*.conf" -type f 2>/dev/null | wc -l)" -gt 0 ]; then
      autoregister_config=$(find "${ZABBIX_CONFIG_PATH}/${ZABBIX_CONFIG_FILE}.d" -name "*.conf" -type f -exec grep -h "# Autoregister=" {} \; 2>/dev/null | cut -d = -f2 | xargs | tr " " ":" | sed 's/^/:/' | sed 's/$/:/')
      print_debug "Zabbix Agent - Adding Autoregister Configuration '${autoregister_config}'"
    else
      autoregister_config=""
      print_debug "Zabbix Agent - No autoregister config files found"
    fi
    sed -i "/HostMetadata/d" "${ZABBIX_CONFIG_PATH}"/"${ZABBIX_CONFIG_FILE}"
    
    # Enable autoregistration
    if var_true "${ZABBIX_ENABLE_AUTOREGISTER}" ; then
      print_debug "Zabbix Agent - Enabling Auto Register"
      if [ -n "${autoregister_config}" ]; then
        sed -i "/^Include=.*/i HostMetadata=${autoregister_config}" "${ZABBIX_CONFIG_PATH}"/"${ZABBIX_CONFIG_FILE}"
      fi
      
      # Configure DNS-based autoregistration
      if var_true "${ZABBIX_ENABLE_AUTOREGISTER_DNS}" ; then
        print_debug "Zabbix Agent - Enabling Auto Register by DNS"
        
        # Set DNS hostname
        if [ -n "${ZABBIX_AUTOREGISTER_DNS_NAME}" ] ; then
          print_debug "Zabbix Autoregsiter DNS: Using ${ZABBIX_AUTOREGISTER_DNS_NAME} as hostname"
        else
          ZABBIX_AUTOREGISTER_DNS_NAME="${ZABBIX_HOSTNAME}${ZABBIX_AUTOREGISTER_SUFFIX}"
        fi
        
        # Update host interface configuration
        sed -i "/HostInterface=.*/d" "${ZABBIX_CONFIG_PATH}"/"${ZABBIX_CONFIG_FILE}"
        sed -i "/^Include=.*/i HostInterface=${ZABBIX_AUTOREGISTER_DNS_NAME}" "${ZABBIX_CONFIG_PATH}"/"${ZABBIX_CONFIG_FILE}"
      fi
    fi

    #-----------------------------------------------------------------------------
    # CONFIGURATION PERMISSIONS
    #-----------------------------------------------------------------------------
    # Set configuration permissions
    chown -R "${ZABBIX_USER}":root "${ZABBIX_CONFIG_PATH}"
    chmod -R 0755 "${ZABBIX_CONFIG_PATH}"

    #-----------------------------------------------------------------------------
    # FIREWALL INTEGRATION
    #-----------------------------------------------------------------------------
    # Wait for fail2ban socket and set ACL
    if var_true "${CONTAINER_ENABLE_FIREWALL}" && var_true "${CONTAINER_ENABLE_FAIL2BAN}" ; then
      print_debug "Waiting for fail2ban socket to appear"
      counter=0
      timeout=60
      while [ ! -S "/var/run/fail2ban/fail2ban.sock" ] ; do
        sleep 1
        counter=$((counter + 1))
        if [ $counter -ge $timeout ]; then
          print_error "Timeout waiting for fail2ban socket after ${timeout} seconds"
          exit 1
        fi
      done
      print_debug "Fail2ban socket appeared after ${counter} seconds"
      setfacl -m g:fail2ban:rwx /var/run/fail2ban/fail2ban.sock
    fi

    #-----------------------------------------------------------------------------
    # ZABBIX AGENT STARTUP
    #-----------------------------------------------------------------------------
    # Verify zabbix command is set before starting
    if [ -z "${zabbix_command}" ]; then
      print_error "Zabbix command not set, cannot start agent"
      exit 1
    fi
    
    # Start Zabbix agent
    print_start "Starting Zabbix Agent (${zabbix_agent_type}) ${ZABBIX_VERSION}"
    silent exec s6-setuidgid "${ZABBIX_USER}" ${zabbix_command}  -c "${ZABBIX_CONFIG_PATH}"/"${ZABBIX_CONFIG_FILE}" -f
  ;;
esac
