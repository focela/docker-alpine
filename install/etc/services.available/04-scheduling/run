#!/command/with-contenv bash
#-----------------------------------------------------------------------------
# Container Scheduling Service Runtime Script
#
# Purpose: Manages the runtime execution of scheduling backends (cron) for
#          container task scheduling with logrotate integration and OS-specific
#          cron daemon management
# Context: Runs as s6-overlay service after container initialization completes
# Note: This script handles cron service startup with dynamic configuration
#-----------------------------------------------------------------------------



#-----------------------------------------------------------------------------
# SERVICE INITIALIZATION
#-----------------------------------------------------------------------------
# Source container core functions and prepare scheduling service
source /assets/functions/00-container
PROCESS_NAME="scheduling"
output_off
prepare_service
check_container_initialized
check_service_initialized init

#-----------------------------------------------------------------------------
# LOGRotate CONFIGURATION
#-----------------------------------------------------------------------------
# Configure logrotate if enabled during service runtime
if var_true "${CONTAINER_ENABLE_LOGROTATE}" ; then
  print_debug "[logrotate] Setting Logrotate retention days after all services have finished initializing"
  mkdir -p /etc/logrotate.d
  print_debug "[logrotate] Moving files from /assets/logrotate to /etc/logrotate.d"
  cp -R /assets/logrotate/* /etc/logrotate.d
  
  # Only process logrotate files if they exist
  if [ -n "$(ls -A /etc/logrotate.d/ 2>/dev/null)" ]; then
    sed -i "s|rotate .*|rotate ${LOGROTATE_RETAIN_DAYS}|g" /etc/logrotate.d/*
    sed -i "s|//|/|g" /etc/logrotate.d/*
  fi
  
  chown -R root:root /etc/logrotate.d
  chmod -R 0644 /etc/logrotate.d
fi

# Mark service initialization as complete
liftoff

#-----------------------------------------------------------------------------
# SCHEDULING BACKEND EXECUTION
#-----------------------------------------------------------------------------
# Execute scheduling backend based on configuration
case "${CONTAINER_SCHEDULING_BACKEND}" in
  "cron" )
    #-----------------------------------------------------------------------------
    # CRON LOGGING CONFIGURATION
    #-----------------------------------------------------------------------------
    # Configure cron logging based on environment variables
    if [ "${SCHEDULING_LOG_TYPE,,}" = "file" ]; then
      cron_log_file="-L ${SCHEDULING_LOG_LOCATION}/cron.log"
    fi

    #-----------------------------------------------------------------------------
    # CRON CONFIGURATION PARSING
    #-----------------------------------------------------------------------------
    # Parse all cron configuration files and create temporary crontab
    print_debug "Parsing all files from ${CONTAINER_SCHEDULING_LOCATION}"
    temp_crontab=$(date +%s)

    # Ensure cron directory exists before creating temporary crontab
    mkdir -p /tmp/.container/cron/

    echo 'MAILTO=""' > /tmp/.container/cron/${temp_crontab}
    
    # Ensure scheduling directory is not empty (create placeholder if needed)
    if dir_empty "${CONTAINER_SCHEDULING_LOCATION}" ; then 
      echo "# Intentionally empty" > "${CONTAINER_SCHEDULING_LOCATION}"/empty 
    fi
    
    # Extract cron entries from configuration files and add to temporary crontab
    if [ -n "$(ls -A "${CONTAINER_SCHEDULING_LOCATION}" 2>/dev/null)" ]; then
      sed "/#/d" "${CONTAINER_SCHEDULING_LOCATION}"/* | awk 'NF' >> /tmp/.container/cron/${temp_crontab}
    fi
    silent crontab -r
    crontab /tmp/.container/cron/${temp_crontab}

    #-----------------------------------------------------------------------------
    # CRON SERVICE STARTUP
    #-----------------------------------------------------------------------------
    # Start cron daemon with OS-specific parameters
    print_start "Starting cron"
    os=$(cat /etc/os-release |grep ^ID= | cut -d = -f2 | tr -d '"')
    
    case ${os} in
      "alpine" )
        output_on
        exec /usr/sbin/crond -f -l ${SCHEDULING_LOG_LEVEL} ${cron_log_file}
      ;;
      "debian" | "ubuntu" )
        output_on
        exec /usr/sbin/cron -f -l ${SCHEDULING_LOG_LEVEL} ${cron_log_file}
      ;;
      * )
        print_error "Unsupported OS: ${os}"
        exit 1
      ;;
    esac
  ;;
esac
