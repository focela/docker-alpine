#!/command/with-contenv bash
#-----------------------------------------------------------------------------
# Container Permissions Management Script
#
# Purpose: Manages user and group permissions, UIDs, GIDs, and group memberships
#          based on environment variables for container security and access control
# Context: Runs during container initialization phase via s6-overlay cont-init.d
# Note: Only processes permissions if ENABLE_PERMISSIONS is set to TRUE
#-----------------------------------------------------------------------------



#-----------------------------------------------------------------------------
# INITIAL SETUP
#-----------------------------------------------------------------------------
# Source container core functions and set process name
source /assets/functions/00-container
output_off
# shellcheck disable=SC2034
PROCESS_NAME="permissions"

#-----------------------------------------------------------------------------
# PERMISSIONS FEATURE ENABLEMENT
#-----------------------------------------------------------------------------
# Enable or disable permissions features based on environment variable
if var_true "${ENABLE_PERMISSIONS}" ; then
  CONTAINER_ENABLE_PERMISSIONS=TRUE
elif var_false "${ENABLE_PERMISSIONS}" ; then
  CONTAINER_ENABLE_PERMISSIONS=FALSE
fi

# Enable debug logging if DEBUG_PERMISSIONS is set
if var_true "${DEBUG_PERMISSIONS}" ; then
  CONTAINER_LOG_LEVEL="DEBUG"
fi

#-----------------------------------------------------------------------------
# USER AND GROUP PERMISSIONS PROCESSING
#-----------------------------------------------------------------------------
# Process user and group permissions if enabled
if var_true "${CONTAINER_ENABLE_PERMISSIONS}" ; then
  print_debug "Enabling permissions features"

  #-----------------------------------------------------------------------------
  # USER UID MANAGEMENT
  #-----------------------------------------------------------------------------
  # Extract user names and UIDs from environment variables
  unames="$(set -o posix ; set | sort | grep -e '^USER_' | sed "s|^USER_||g" | tr '[:upper:]' '[:lower:]' | tr ' ' '\n') "
  unames+="$(set -o posix ; set | sort | grep -e '^CONTAINER_USER_' | sed "s|^CONTAINER_USER_||g" | tr '[:upper:]' '[:lower:]' | tr ' ' '\n')"

  # Process each user UID pair
  for upair in $unames; do
    uname=$(echo "${upair}" | cut -d = -f 1)
    uid=$(echo "${upair}" | cut -d = -f 2)
    _userexists=false
    
    # Check if user exists in /etc/passwd
    if grep -e "^${uname}" /etc/passwd > /dev/null; then
      _userexists=true
    elif grep -e "^${uname/_/-}" /etc/passwd > /dev/null; then
      _userexists=true
      uname=${uname/_/-}
    fi
    
    # Update user UID if user exists
    if [ "${_userexists}" = true ] ; then
      ouid=$(grep -e "^${uname}" /etc/passwd | awk -F: '{print $3}')
      print_debug "Changing user '${uname}' to uid '${uid}' from '${ouid}'"
      sed -i "s|${uname}:x:${ouid}:|${uname}:x:${uid}:|g" /etc/passwd
    fi
  done

  #-----------------------------------------------------------------------------
  # GROUP GID MANAGEMENT
  #-----------------------------------------------------------------------------
  # Extract group names and GIDs from environment variables
  groups="$(set -o posix ; set | sort | grep -e '^GROUP_' | sed "s|^GROUP_||g" | tr '[:upper:]' '[:lower:]' | tr ' ' '\n' | sed '/add_.*/d' ) "
  groups+="$(set -o posix ; set | sort | grep -e '^CONTAINER_GROUP_' | sed "s|^CONTAINER_GROUP_||g" | tr '[:upper:]' '[:lower:]' | tr ' ' '\n' | sed '/add_.*/d' ) "

  # Process each group GID pair
  for gpair in $groups; do
    gname=$(echo "${gpair}" | cut -d = -f 1)
    gid=$(echo "${gpair}" | cut -d = -f 2)
    _groupexists=false
    
    # Check if group exists in /etc/group
    if grep -e "^${gname}" /etc/group > /dev/null; then
      _groupexists=true
    elif grep -e "^${gname/_/-}" /etc/group > /dev/null; then
      _groupexists=true
      gname=${gname/_/-}
    fi

    # Update group GID if group exists
    if [ "${_groupexists}" = true ] ; then
      opgid=$(grep -e "^${gname}" /etc/group | awk -F: '{print $3}')
      og=$(grep -e "^${gname}" /etc/group | awk -F: '{print $1}')
      oggid=$(grep -e "^${gname}" /etc/group | awk -F: '{print $3}')
      print_debug "Changing group '${gname}' to gid '${gid}' from '${oggid}'"
      
      # Safely update GID in /etc/passwd for users belonging to this group
      awk -F: -v old_gid="${opgid}" -v new_gid="${gid}" '
        $4 == old_gid { $4 = new_gid }
        { print $0 }
      ' /etc/passwd > /tmp/passwd.tmp && mv /tmp/passwd.tmp /etc/passwd
      
      # Update GID in /etc/group
      sed -i "s|${og}:x:${oggid}|${og}:x:${gid}|g" /etc/group
    fi
  done

  #-----------------------------------------------------------------------------
  # GROUP MEMBERSHIP MANAGEMENT
  #-----------------------------------------------------------------------------
  # Extract group addition configurations from environment variables
  groupsadd="$(set -o posix ; set | sort | grep -e '^GROUP_ADD_' | sed 's|^GROUP_ADD_||g' | tr '[:upper:]' '[:lower:]' ) "
  groupsadd+="$(set -o posix ; set | sort | grep -e '^CONTAINER_GROUP_ADD_' | sed 's|^CONTAINER_GROUP_ADD_||g' | tr '[:upper:]' '[:lower:]' )"

  # Process each group addition configuration
  for gapair in $groupsadd; do
    gname=$(echo "${gapair}" | cut -d = -f1 )
    _groupexists=false
    
    # Check if group exists in /etc/group
    if grep -e "^${gname}" /etc/group > /dev/null; then
      _groupexists=true
    elif grep -e "^${gname/_/-}" /etc/group > /dev/null; then
      _groupexists=true
      gname=${gname/_/-}
    fi

    # Add users to group if group exists
    if [ "${_groupexists}" = true ] ; then
      uta=$(echo "${gapair}" | cut -d = -f2 | tr ',' '\n')
      for userstogroup in $uta ; do
        print_debug "Adding user '${userstogroup}' to '${gname}'"
        
        # Detect OS and use appropriate group management command
        os=$(cat /etc/os-release |grep ^ID= | cut -d = -f2 | tr -d '"')
        case "${os,,}" in
          "alpine" )
            silent addgroup "${userstogroup}" "${gname}"
          ;;
          "debian" | "ubuntu" )
            silent usermod -a -G "${gname}" "${userstogroup}"
          ;;
        esac
      done
    fi
  done
fi

#-----------------------------------------------------------------------------
# FINAL INITIALIZATION
#-----------------------------------------------------------------------------
# Complete permissions configuration sequence
liftoff
output_on
