#!/command/with-contenv bash
#-----------------------------------------------------------------------------
# Container Scheduling Configuration Script
#
# Purpose: Configures and sets up cron-based scheduling for container tasks
#          based on environment variables and default configurations
# Context: Runs during container initialization phase via s6-overlay cont-init.d
# Note: Supports both environment variable and default file-based cron configurations
#-----------------------------------------------------------------------------



#-----------------------------------------------------------------------------
# INITIAL SETUP
#-----------------------------------------------------------------------------
# Source container core functions and prepare scheduling service
source /assets/functions/00-container
output_off
prepare_service single
PROCESS_NAME="scheduling"

#-----------------------------------------------------------------------------
# SCHEDULING FEATURE ENABLEMENT
#-----------------------------------------------------------------------------
# Enable or disable scheduling features based on cron configuration
if var_false "${ENABLE_CRON}" ; then 
  CONTAINER_ENABLE_SCHEDULING=FALSE 
fi

if var_true "${ENABLE_CRON}" ; then
  CONTAINER_ENABLE_SCHEDULING=TRUE
  CONTAINER_SCHEDULING_BACKEND="cron"
fi

#-----------------------------------------------------------------------------
# SCHEDULING BACKEND CONFIGURATION
#-----------------------------------------------------------------------------
# Configure scheduling backend if enabled
if var_false "${CONTAINER_ENABLE_SCHEDULING}" ; then
  print_debug "Disabling Scheduling"
  service_stop "$(basename "$0")"
else
  case "${CONTAINER_SCHEDULING_BACKEND,,}" in
    "cron" )
      #-----------------------------------------------------------------------------
      # CRON INFRASTRUCTURE SETUP
      #-----------------------------------------------------------------------------
      # Create cron container directory for task management
      mkdir -p /tmp/.container/cron

      # Set up logging if file-based logging is enabled
      if [ "${SCHEDULING_LOG_TYPE,,}" = "file" ] ; then
        mkdir -p "${SCHEDULING_LOG_LOCATION}"
        touch "${SCHEDULING_LOG_LOCATION}"/cron.log
        create_logrotate cron "${SCHEDULING_LOG_LOCATION}"/cron.log
      fi

      # Ensure scheduling location directory exists
      if [ ! -d "${CONTAINER_SCHEDULING_LOCATION}" ]; then 
        mkdir -p "${CONTAINER_SCHEDULING_LOCATION}" 
      fi

      #-----------------------------------------------------------------------------
      # ENVIRONMENT VARIABLE CRON CONFIGURATION
      #-----------------------------------------------------------------------------
      # Process cron configurations from environment variables
      cronenv=$(mktemp)
      set -o posix; set -f ; set | grep -E '^CRON_'| sed "s|CRON_||g" > "${cronenv}"
      sed -i "/^PERIOD/d" "${cronenv}"
      
      # Process each cron entry from environment variables
      while IFS= read -r cron_entry; do
        schedule_title="${cron_entry%%=*}"
        schedule_title="${schedule_title,,}"
        schedule_value="${cron_entry#*=}"
        # Strip quotes from value (both single and double quotes)
        schedule_value="$(echo "${schedule_value}" | sed 's/^["'\'']*\(.*\)["'\'']*$/\1/')"
        
        if var_false "${schedule_value}" ; then
          print_debug "Disabling ${schedule_title} scheduled task"
          cat <<EOF > "${CONTAINER_SCHEDULING_LOCATION}/${schedule_title}"
# Nulled execution of command generated by Environment Variable defined in Image build, or Runtime argument
# Entered Value: ${schedule_value}
# Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')
EOF
        else
          print_debug "Adding ${schedule_title} with to be parsed by ${CONTAINER_SCHEDULING_BACKEND}"
          cat <<EOF > "${CONTAINER_SCHEDULING_LOCATION}/${schedule_title}"
# Scheduled execution of command created automatically generated by Environment Variable defined in Image build, or Runtime argument
# Entered Value: ${schedule_value}
# Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %Z')

${schedule_value}
EOF
        fi
      done < "${cronenv}"
      
      # Clean up temporary files and variables
      rm -rf "${cronenv}"
      set +f
      unset cronenv schedules cron_entry schedule_value schedule_title
      unset "${!CRON_@}"

      #-----------------------------------------------------------------------------
      # DEFAULT FILE CRON CONFIGURATION
      #-----------------------------------------------------------------------------
      # Process cron configurations from default files
      for d in /assets/defaults/* ; do
        if [ "$d" != "/assets/defaults/00-container" ] ; then
          # shellcheck source=/assets/defaults/
          output_off
          source "$d"
          output_on
          
          # Extract cron configurations from sourced defaults
          cronenv=$(mktemp)
          set -o posix; set -f ; set | grep -E '^CRON_'| sed "s|CRON_||g" > "${cronenv}"
          sed -i "/^PERIOD/d" "${cronenv}"
          
          # Process each cron entry from default files
          while IFS= read -r cron_entry; do
            schedule_title="${cron_entry%%=*}"
            schedule_title="${schedule_title,,}"
            schedule_value="${cron_entry#*=}"
            # Strip quotes from value (both single and double quotes)
            schedule_value="$(echo "${schedule_value}" | sed 's/^["'\'']*\(.*\)["'\'']*$/\1/')"
            
            # Only add if schedule doesn't already exist
            if [ ! -f "${CONTAINER_SCHEDULING_LOCATION}/${schedule_title,,}" ] ; then
              print_debug "Adding ${schedule_title} with value ${schedule_value} to crontab"
              cat <<EOF > "${CONTAINER_SCHEDULING_LOCATION}/${schedule_title,,}"
# Scheduled execution of command taken from default file: '${d}'
# Entered Value: ${schedule_value}
# Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

${schedule_value}
EOF
            else
              print_debug "Skipping adding '${schedule_title}' as it already exists"
            fi
          done < "${cronenv}"
          
          # Clean up temporary files and variables
          rm -rf "${cronenv}"
          set +f
          unset cronenv schedules cron_entry schedule_value schedule_title
          unset "${!CRON_@}"
        fi
      done
      
      print_notice "Container configured for scheduled tasks with 'cron'"
    ;;
    
    * )
      print_error "Unknown Scheduling Backend"
      exit 1
    ;;
  esac
fi

#-----------------------------------------------------------------------------
# FINAL INITIALIZATION
#-----------------------------------------------------------------------------
# Complete scheduling configuration sequence
liftoff
output_on
